generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  role           Role          @default(USER)
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  Transaction    Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id     String          @id @default(uuid())
  type   TransactionType
  // entity        EntityType
  // paymentMethod PaymentMethod
  // recurring     Recurring?
  name   String
  amount Decimal         @db.Decimal(10, 2)
  // location      String?
  // notes         String?
  // receipt       String?
  // bankAccount   String?

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  User                User?                 @relation(fields: [userId], references: [id])
  userId              String?
  categories          Category[]            @relation("TransactionCategory")
  TransactionCategory TransactionCategory[]
}

model Category {
  id           String        @id @default(uuid())
  name         String
  color        String        @default("#000000")
  icon         String        @default("/category/archive.svg")
  transactions Transaction[] @relation("TransactionCategory")

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  TransactionCategory TransactionCategory[]
}

model TransactionCategory {
  id            String      @id @default(uuid())
  transactionId String
  categoryId    String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  category      Category    @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fuel {
  id      String   @id @default(uuid())
  brand   String
  amount  Decimal  @db.Decimal(10, 2)
  priceLt Decimal  @db.Decimal(10, 3)
  liters  Decimal  @db.Decimal(10, 2)
  kms     Int
  type    FuelType
  note    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// // emun type
enum TransactionType {
  INCOME
  EXPENSE
}

// // enum entity
enum EntityType {
  COMPANY
  PERSON
}

// // enum paymentMethod
enum PaymentMethod {
  CASH
  CREDIT
  DEBIT
}

enum Recurring {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum FuelType {
  GASOLEO
  GASOLINA
  GPL
}

enum Role {
  ADMIN
  USER
}
